-- 1.What is the total revenue generated from all rentals in the database?
select sum(amount) as total_revenue from payment p join rental r on p.rental_id=r.rental_id;

-- 2.How many rentals were made in each month_name? 
select monthname(rental_date) as month, count(*) from rental group by month;    

-- 3.What is the rental rate of the film with the longest title in the database?
select title,rental_rate from film where char_length(title) = (select max(char_length(title)) from film);

-- 4.What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")? 
select avg(f.rental_rate) from film f join inventory i on f.film_id=i.film_id join rental r on i.inventory_id=r.inventory_id 
where r.rental_date between '2005-05-05 22:04:30' and date_add('2005-05-05 22:04:30',interval 30 day);

-- 5.What is the most popular category of films in terms of the number of rentals? 
select c.name, count(*) as popularity from category c join film_category fc on c.category_id=fc.category_id join inventory i 
on fc.film_id=i.film_id  join rental r on i.inventory_id=r.inventory_id group by c.name order by popularity desc limit 1;

-- 6.Find the longest movie duration from the list of films that have not been rented by any customer.
select title,max(length) as duration from film where film_id not in 
(select film_id from inventory) group by title order by duration desc limit 1;

-- 7.What is the average rental rate for films, broken down by category? 
select c.name,avg(f.rental_rate) from film f join film_category fc on f.film_id=fc.film_id join category c 
on fc.category_id=c.category_id group by c.name;

-- 8.What is the total revenue generated from rentals for each actor in the database?
select a.actor_id,concat(a.first_name,' ',a.last_name) as name, sum(p.amount) as revenue from actor a join film_actor fa on a.actor_id=fa.actor_id
join film f on fa.film_id=f.film_id join inventory i on f.film_id=i.film_id join rental r on i.inventory_id=r.inventory_id join payment p 
on r.rental_id=p.rental_id group by name,a.actor_id;

-- 9.Show all the actresses who worked in a film having a "Wrestler" in the description.
 select concat(a.first_name,' ',a.last_name) as name from actor a join film_actor fa on a.actor_id=fa.actor_id 
 join film f on fa.film_id=f.film_id where f.description like '%Wrestler%' group by name;
 
 -- 10.Which customers have rented the same film more than once? 
 select concat(c.first_name,' ',c.last_name) as name,f.title,count(*) as rented from customer c join rental r 
 on c.customer_id=r.customer_id join inventory i on r.inventory_id=i.inventory_id join film f
 on i.film_id=f.film_id group by name,f.title having rented > 1 ;
 
 -- 11.How many films in the comedy category have a rental rate higher than the average rental rate? 
 select c.name,count(*) from category c join film_category fc on c.category_id=fc.category_id join film f on fc.film_id=f.film_id
 where f.rental_rate > (select avg(rental_rate) from film)
 group by c.name having c.name = 'comedy';
 
 -- 12.Which films have been rented the most by customers living in each city? 
select city,title from (
select city,title,rank() over(partition by city order by rented desc) as rent from(
select c.city,f.title,count(*) as rented from city c
join address a on a.city_id = c.city_id
join customer cs on cs.address_id = a.address_id
join rental r on r.customer_id = cs.customer_id
join inventory i on i.inventory_id = r.inventory_id
join film f on f.film_id = i.film_id
group by c.city,f.title) a) b
where rent = 1;
 
 -- 13.What is the total amount spent by customers whose rental payments exceed $200? 
 select concat(c.first_name,' ',c.last_name) as name,sum(p.amount) as amount from payment p 
 join customer c on p.customer_id=c.customer_id group by name having amount > 200;

 -- 14.Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema]
select column_name, referenced_table_name, referenced_column_name from information_schema.key_column_usage 
where referenced_table_name = 'film_rental' and table_name = 'rental';
 
 -- 15.Create a View for the total revenue generated by each staff member, broken down by store city with the country name.
 create view revenue as 
 select concat(s.first_name,' ',s.last_name) as name,sum(p.amount),c.city,cy.country from payment p join staff s on p.staff_id=s.staff_id
 join address a on s.address_id=a.address_id join city c on a.city_id=c.city_id join country cy on c.country_id=cy.country_id
 group by 1,3,4;
 
 select * from revenue;
 
 -- 16.Create a view based on rental information consisting of visiting_day, customer_name, the title of the film, no_of_rental_days, the amount paid by the customer along with the percentage of customer spending.
 create view rental_info as
 select dayname(r.rental_date),concat(c.first_name,' ',c.last_name) as name,f.title, datediff(r.return_date,r.rental_date) as no_of_days,
 p.amount, p.amount*100/sum(p.amount) over(partition by concat(c.first_name,' ',c.last_name)) as percent
 from film f join inventory i on f.film_id=i.film_id join rental r on i.inventory_id=r.inventory_id join payment p 
 on r.rental_id=p.rental_id join customer c on c.customer_id=p.customer_id;
 
 select * from rental_info;

 -- 17.Display the customers who paid 50% of their total rental costs within one day.
select concat(c.first_name,c.last_name) as customer,sum(p.amount),p.payment_date
from customer c join payment p on c.customer_id = p.customer_id
where date_add(p.payment_date, interval 1 day)
group by 1,3 having sum(p.amount) >= (select sum(amount)/2 from payment);